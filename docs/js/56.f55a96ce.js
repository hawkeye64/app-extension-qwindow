(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[56],{"6a74":function(n,e,t){"use strict";t.r(e),e["default"]="<template>\n  <div class=\"q-ma-md\" style=\"max-width: 800px; width: 100%\">\n    <div class=\"col\">\n      <q-window\n        ref=\"window1\"\n        v-model=\"visible1\"\n        title=\"QWindow Modify Menu 1\"\n        :start-x=\"50\"\n        :start-y=\"50\"\n        :height=\"300\"\n        :width=\"400\"\n        :menu-func=\"updateMenu1\"\n        :actions=\"['embedded', 'pin', 'maximize', 'fullscreen']\"\n        embedded\n        content-class=\"bg-grey-1\"\n      >\n        <div class=\"q-pa-md fit scroll\">\n          <q-scroll-area style=\"width: 100%; height: 100%\">\n            <div class=\"text-h4\">Quasar Framework</div>\n            <div class=\"quasar-logo\"><img src=\"https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" alt=\"Quasar Framework\" height=\"150\" width=\"150\" style=\"float:left\" /></div>\n            <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n            <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n          </q-scroll-area>\n        </div>\n      </q-window>\n      <q-window\n        ref=\"window2\"\n        v-model=\"visible2\"\n        title=\"QWindow Modify Menu 2\"\n        :start-x=\"100\"\n        :start-y=\"100\"\n        :height=\"300\"\n        :width=\"400\"\n        :menu-func=\"updateMenu2\"\n        :actions=\"['embedded', 'pin', 'maximize', 'fullscreen']\"\n        embedded\n        content-class=\"bg-grey-1\"\n      >\n        <div class=\"q-pa-md fit scroll\">\n          <q-scroll-area style=\"width: 100%; height: 100%\">\n            <div class=\"text-h4\">Quasar Framework</div>\n            <div class=\"quasar-logo\"><img src=\"https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" alt=\"Quasar Framework\" height=\"150\" width=\"150\" style=\"float:left\" /></div>\n            <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n            <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n          </q-scroll-area>\n        </div>\n      </q-window>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      visible1: true,\n      visible2: true\n    }\n  },\n  methods: {\n    updateMenu1 (menuItems) {\n      if (this.$refs.window1.isEmbedded !== true && this.$refs.window1.isFullscreen !== true) {\n        if (menuItems[menuItems.length - 1].key === 'visible') {\n          menuItems.splice(menuItems.length - 1, 0, 'separator')\n        }\n        const sendToBack = {\n          key: 'sendtoback',\n          state: false,\n          on: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack1\n          },\n          off: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack1\n          }\n        }\n        const bringToFront = {\n          key: 'bringtofront',\n          state: false,\n          on: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront1\n          },\n          off: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront1\n          }\n        }\n        const centerWindow = {\n          key: 'centerwindow',\n          state: false,\n          on: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow1\n          },\n          off: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow1\n          }\n        }\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, sendToBack)\n        menuItems.splice(menuItems.length, 0, bringToFront)\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, centerWindow)\n      }\n    },\n    bringToFront1 () {\n      this.$refs.window1.bringToFront()\n    },\n    sendToBack1 () {\n      this.$refs.window1.sendToBack()\n    },\n    centerWindow1 () {\n      this.$refs.window1.centerWindow()\n    },\n    updateMenu2 (menuItems) {\n      if (this.$refs.window2.isEmbedded !== true && this.$refs.window2.isFullscreen !== true) {\n        if (menuItems[menuItems.length - 1].key === 'visible') {\n          menuItems.splice(menuItems.length - 1, 0, 'separator')\n        }\n        const sendToBack = {\n          key: 'sendtoback',\n          state: false,\n          on: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack2\n          },\n          off: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack2\n          }\n        }\n        const bringToFront = {\n          key: 'bringtofront',\n          state: false,\n          on: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront2\n          },\n          off: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront2\n          }\n        }\n        const centerWindow = {\n          key: 'centerwindow',\n          state: false,\n          on: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow2\n          },\n          off: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow2\n          }\n        }\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, sendToBack)\n        menuItems.splice(menuItems.length, 0, bringToFront)\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, centerWindow)\n      }\n    },\n    bringToFront2 () {\n      this.$refs.window2.bringToFront()\n    },\n    sendToBack2 () {\n      this.$refs.window2.sendToBack()\n    },\n    centerWindow2 () {\n      this.$refs.window2.centerWindow()\n    }\n  }\n}\n<\/script>\n"}}]);