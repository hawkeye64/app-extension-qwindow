(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[5],{"0960":function(e,t,o){"use strict";o.r(t);var n=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("hero",[o("div",[o("q-markdown",[e._v('\n**QWindow** allows for a floating, movable, resizable window above the regular HTML elements.\n\nIt is quite possible to start a QWindow off as `floating`, but for these examples, the window must start off as `embedded` so there isn\'t a lot of windows popping up and then knowing which example they come from.\n\nThis means, you must access the menu content to make it `floating`.\n\nOnce a window is `floating`, unless restricted, you can move it (via the titlebar) or resize it (via sides and corners).\n\n:::tip\nAll QWindows are initially relative to the browser\'s view. This means, even if you scroll, it will stay in-place. If you want the QWindow to scroll with the document, then set the `scroll-with-window` to `true`.\n:::\n\n:::tip\nUsing the mouse or keyboard to scroll will cause the QWindow to be a bit "jerky". These devices do not do a pixel-by-pixel scroll, but causes a "jump" in the pixels to a new scroll position. Try scrolling with the scrollbar to see the difference.\n:::\n\n:::info\nWhen you move or resize a QWindow in `floating` mode, then `embed` it, if you make it `floating` again, it\'s last position is retained.\n:::\n\n:::warning\nFloating windows use a Vue Portal and while developing, the HMR is unable to re-create this portal which may cause issues. Just refresh the page if this happens to you during development.\n:::\n\n      ')]),o("example-title",{attrs:{title:"Basic"}}),o("example-viewer",{attrs:{title:"Embedded/Floating",file:"Basic","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nYou might have noticed on the previous example, when the QWindow is floating, when you scroll the document, the QWindow stays in-place.\n\nTo prevent the in-place and scroll with the document, use the `scroll-with-window` property.\n\n::: tip\nIf you make this window `floating`, you will have to scroll up to see it. It's position is now relative to the document and not to the view port.\n:::\n\nMake sure to `embed` the `floating` window before moving on to the next example.\n      ")]),o("example-viewer",{attrs:{title:"Scroll With Window",file:"ScrollWithWindow","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Dense",file:"Dense","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nActions allow the window to be in different states.\n\nThe available actions are:\n1. `embedded`\n2. `pinned`\n3. `maximize`\n4. `fullscreen`\n5. `close`\n\nAll of the actions are self-explanatory, except for `pinned`. When a QWindow is `pinned` this means it can no longer be moved or resized.\n\nIn the example below, we will use all actions, except for `close` which will be discussed in a later example.\n\n`float` the example window to see the actions in the menu.\n      ")]),o("example-viewer",{attrs:{title:"Actions",file:"Actions","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Border",file:"Border","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Titlebar Style",file:"TitlebarStyle","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Content Style - String",file:"ContentStyleString","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Content Style - Object",file:"ContentStyleObject","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Content Style - Array",file:"ContentStyleArray","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nIf you don't like the **grippers** you can hide them with the `hide-grippers` property. In this case, there will be invisible bars running on the sides, as well as all corners that allow for resizing. After making the QWindow `floating`, hover the mouse over these areas to see the cursor change.\n      ")]),o("example-viewer",{attrs:{title:"Hide Grippers",file:"GripperNone","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Round Grippers",file:"GripperRound","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Colored Grippers",file:"GripperColored","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"No Resize",file:"NoResize","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"No Move",file:"NoMove","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThe `resizable` property allows you to turn on/off various resize handles. The acceptable array items are:\n```js\n[ 'top', 'left', 'right', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']\n```\nSee the code in the examples below for details.\n      ")]),o("example-viewer",{attrs:{title:"Resizable",file:"Resizable","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nYou can play with the QWindow and get feedback on the messages that are emitted. The `position` message is always for a non-embedded window and will emit when a QWindow is moved, resized or the document is scrolled.\n      ")]),o("example-viewer",{attrs:{title:"Messages",file:"Messages","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThe `auto-pin` property allows you to automatically pin/unpin a floating QWindow depending on it's selected state.\n\n:::warning\nClicking the menu on an unselected QWindow, the QWindow becomes selected and the menu will have to be clicked a second time.\n\nIt is recommended to use `auto-pin` along with the `headless` property.\n:::\n      ")]),o("example-viewer",{attrs:{title:"Auto Pin",file:"AutoPin","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-title",{attrs:{title:"Advanced"}}),o("q-markdown",[e._v("\nYou can provide the action `close` in the array of actions. This will add a **Close** option to the menu. Essentually, the window is really hidden. It is up to the developer to provide a way for the QWindow to be re-displayed by setting the `v-model` (value) property.\n      ")]),o("example-viewer",{attrs:{title:"Close Action",file:"CloseAction","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThe example below is just showing more content in the default slot.\n      ")]),o("example-viewer",{attrs:{title:"Scroll Area",file:"ScrollArea","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThere is opportunity to modify the displayed menu just before it is displayed. In the example below, two functions are added: `Bring to Front` and `Send to Back` where the appropriate functionality will be called.\n\nYou can add to the menu the text `separator` which will put a separator between items. Other than that, the rest of the items must be objects that look like this:\n```js\nlet sendToBack = {\n  key: 'sendtoback',\n  state: true,\n  on: {\n    label: 'Send to Back',\n    icon: '',\n    func: this.sendToBack\n  },\n  off: {\n    label: 'Send to Back',\n    icon: '',\n    func: this.sendToBack\n  }\n}\n```\nWhen `state` is `true`, then the `on` object will be used, otherwise the `off` object will be used. If the state will always be `true` or `false` then you only need to provide the `on` or `off` object, respectively.\n\nIn the example below, menu items are added only if the QWindow is floating. Use the menu to change the `z-order` manually.\n\nAdditionally, one other menu item is being added that you can try out: `Center Window`.\n      ")]),o("example-viewer",{attrs:{title:"Modify Menu",file:"ModifyMenu","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThe example below is using the default scoped slot. When this is done, data (an object) is passed into the scoped slot that contains the current `zIndex`. Usining this information, it is used to control the `z-order` of the `QDrawer` components, so when in fullscreen mode, they are properly displayed.\n      ")]),o("example-viewer",{attrs:{title:"Complex Slot",file:"ComplexSlot","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nQWindow uses `Material Design` icons and the English language as defaults. If you wish to change either of these, you can use the `icon-set` property.\n\nIt looks like this:\n\n```js\n{\n  visible: {\n    on: {\n      icon: 'close',\n      label: 'Show'\n    },\n    off: {\n      icon: 'close',\n      label: 'Hide'\n    }\n  },\n  embedded: {\n    on: {\n      icon: 'lock_outline',\n      label: 'Embed'\n    },\n    off: {\n      icon: 'lock_open',\n      label: 'Float'\n    }\n  },\n  pinned: {\n    on: {\n      icon: 'location_searching',\n      label: 'Pin'\n    },\n    off: {\n      icon: 'gps_fixed',\n      label: 'Unpin'\n    }\n  },\n  maximize: {\n    on: {\n      icon: 'arrow_upward',\n      label: 'Maximize'\n    },\n    off: {\n      icon: 'restore',\n      label: 'Restore'\n    }\n  },\n  fullscreen: {\n    on: {\n      icon: 'fullscreen',\n      label: 'Enter fullscreen'\n    },\n    off: {\n      icon: 'fullscreen_exit',\n      label: 'Leave fullscreen'\n    }\n  }\n}\n```\nEach key within the whole of this structure is optional. You can replace a part of it or all of it. If you have `Material Design` icons turned off in your `quasar.conf.js`, then you need to set all the icons.\nYou do not need to include the `label` property unless you are:\n1. Changing the wording, or\n2. Using a different language\n\nThe example below uses the `icon-set` property to change the icons to use `Fontawesome-v5` and also changes all the text (still in English, but you get the point).\n\nIt is also using the `start-x` and `start-y` properties.\n      ")]),o("example-viewer",{attrs:{title:"Icons and Language",file:"IconsAndLanguage","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nUsing the `no-menu` property means the titlebar will not draw the menu, which means you have to provide the functionality yourself.\n\nIn the example below, we are using a button that when clicked retrieves the `computedMenuData` from QWindow so it can be displayed. We have to do this before the QMenu is displayed, so we can control that via the `showMenu` data attribute.\n\nJust to re-iterate, all state handling must be driven from outside of QWindow, but QWindow makes it very easy for you by providing all the necessary data and functions to do so.\n\nBe aware, that for `no-menu` you probably don't wants to add actions that may impede the user, like `maximize` or `fullscreen`. In the example below, `fullscreen` is still being allowed because most browsers have a hotkey (F11 in Chrome) to toggle fullscreen or by pressing the ESC key.\n      ")]),o("example-viewer",{attrs:{title:"No Menu",file:"NoMenu","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nVue [Provide and Inject](https://vuejs.org/v2/api/#provide-inject) is for **advanced** users. It is not within the scope of this document to teach you how to use this technique. However, if you are using Provide/Inject, be aware that when `floating`, a QWindow will not be able to pass along the injection without remediation on your part.\n\nWhen a QWindow is `floating`, it is using portal code. This means a new Vue `$root` instance is created and it is not aware of your registered Injector. The fix is relatively easy. Just put the Injector class in the slot as well, so that the new Vue `$root` instance, created by the portal, knows your intension.\n\nIn the first QWindow example below, the **Injector** is being handled incorrectly. It works while `embedded`, but does not work while `floating`. The second QWindow is being handled properly. When `floating`, you will see the injected data inside the window.\n\nThe code tabs in this example will not show you everything used in the example. If you are interested in the Inject and Provide code used, check out the Github repo in the demo code.\n      ")]),o("example-viewer",{attrs:{title:"Provide/Inject",file:"ProvideInject","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nUsing the `headless` property means the titlebar will not be drawn, therefore there will be no menu drawn, which means you have to provide the functionality yourself.\n\nIn the example below, we are using a button that when clicked retrieves the `computedMenuData` from QWindow so it can be displayed. We have to do this before the QMenu is displayed, so we can control that via the `showMenu` data attribute.\n\nJust to re-iterate, all state handling must be driven from outside of QWindow, but QWindow makes it very easy for you by providing all the necessary data and functions to do so.\n\nBe aware, that for `headless` you probably don't wants to add actions that may impede the user, like `maximize` or `fullscreen`. In the example below, `fullscreen` is still being allowed because most browsers have a hotkey (F11 in Chrome) to toggle fullscreen or by pressing the ESC key.\n      ")]),o("example-viewer",{attrs:{title:"Headless",file:"Headless","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("example-viewer",{attrs:{title:"Headless With AutoPin",file:"HeadlessAutoPin","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}}),o("q-markdown",[e._v("\nThe example below is **not** using any slot content. Try clicking on the window and then off the window while embedded and then when floating.\n      ")]),o("example-viewer",{attrs:{title:"Headless/AutoPin Selected Styles",file:"HeadlessAutoPinSelected","location-url":e.locationUrl,"js-paths":e.jsPaths,"css-paths":e.cssPaths}})],1),o("q-page-scroller",{attrs:{position:"bottom-right","scroll-offset":150,offset:[18,18]}},[o("q-btn",{attrs:{fab:"",icon:"keyboard_arrow_up",color:"primary"}})],1)],1)},s=[],a=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("h1",{staticClass:"q-markdown--heading-h1 q-markdown--title-heavy example-title",attrs:{id:e.slugifiedTitle},on:{click:function(t){return e.copyHeading(e.slugifiedTitle)}}},[e._v(e._s(e.title))])},i=[];o("5319"),o("498a");function l(e){var t=document.createElement("textarea");t.className="fixed-top",t.value=e,document.body.appendChild(t),t.focus(),t.select(),document.execCommand("copy"),document.body.removeChild(t)}function r(e){const t=window.location.origin+window.location.pathname+"#"+e,o=document.getElementById(e);o&&(o.id=""),window.location.hash="#"+e,o&&setTimeout((()=>{o.id=e}),300),l(t),this.$q.notify({message:"Anchor has been copied to clipboard.",color:"white",textColor:"primary",icon:"done",position:"top",timeout:2e3})}function c(e){return encodeURIComponent(String(e).trim().replace(/\s+/g,"-"))}var h={name:"ExampleTitle",props:{title:{type:String,required:!0}},computed:{slugifiedTitle(){return c(this.title)}},methods:{copyHeading:r}},d=h,p=o("2877"),u=Object(p["a"])(d,a,i,!1,null,null,null),m=u.exports,w=o("2514"),f=o("384e"),b={name:"Examples",components:{ExampleTitle:m,Hero:w["a"]},data(){return{tempToc:[],locationUrl:"https://github.com/quasarframework/quasar-ui-qwindow/tree/dev/demo/src/examples/",jsPaths:[`https://cdn.jsdelivr.net/npm/@quasar/quasar-ui-qwindow@${f["b"]}/dist/index.umd.min.js`],cssPaths:[`https://cdn.jsdelivr.net/npm/@quasar/quasar-ui-qwindow@${f["b"]}/dist/index.min.css`]}},mounted(){this.toc=[],this.tempToc=[],this.addToToc("Basic"),this.addToToc("Embedded/Floating",2),this.addToToc("Scroll With Window",2),this.addToToc("Dense",2),this.addToToc("Actions",2),this.addToToc("Color",2),this.addToToc("Border",2),this.addToToc("Titlebar Style",2),this.addToToc("Content Style - String",2),this.addToToc("Content Style - Object",2),this.addToToc("Content Style - Array",2),this.addToToc("Hide Grippers",2),this.addToToc("Round Grippers",2),this.addToToc("Colored Grippers",2),this.addToToc("No Resize",2),this.addToToc("No Move",2),this.addToToc("Resizable",2),this.addToToc("Messages",2),this.addToToc("Auto Pin",2),this.addToToc("Advanced"),this.addToToc("Close Action",2),this.addToToc("Scroll Area",2),this.addToToc("Modify Menu",2),this.addToToc("Complex Slot",2),this.addToToc("Icons and Language",2),this.addToToc("No Menu",2),this.addToToc("Provide/Inject",2),this.addToToc("Headless",2),this.addToToc("Headless With AutoPin",2),this.addToToc("Headless/AutoPin Selected Styles",2),this.toc=this.tempToc},computed:{toc:{get(){return this.$store.state.common.toc},set(e){this.$store.commit("common/toc",e)}}},methods:{addToToc(e,t=1){let o=e;t>1&&(o="example-"+o);const n=c(o);this.tempToc.push({children:[],id:n,label:e,level:t})}}},y=b,v=o("5096"),g=o("9c40"),T=o("eebe"),x=o.n(T),j=Object(p["a"])(y,n,s,!1,null,null,null);t["default"]=j.exports;x()(j,"components",{QPageScroller:v["a"],QBtn:g["a"]})},2514:function(e,t,o){"use strict";var n=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",[o("section",{staticClass:"page-header"},[o("div",{staticClass:"donate"},[o("a",{attrs:{href:e.donateUrl,target:"_blank",title:"Donate"}},[o("i",{staticClass:"fas fa-heart",staticStyle:{color:"red"}})])]),o("div",{staticClass:"text-h1 project-name"},[e._v(e._s(e.title))]),o("div",{staticClass:"text-h2 project-tagline"},[e._v(e._s(e.tagline))]),o("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.locationUrl,target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),o("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),o("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),e.hasInteractiveDemo?o("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}}):e._e(),o("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.donateUrl,target:"_blank",label:"Donate","no-caps":"",flat:""}}),o("div",{staticClass:"row justify-evenly items-center q-ma-sm"},[o("div",{staticClass:"quasar"},[e._v(e._s(e.quasarDesc))]),o("div",{staticClass:"byline"},[e._v(e._s(e.byline)),o("a",{attrs:{href:e.bylineTwitter,target:"_blank",title:"Twitter"}},[o("i",{staticClass:"fab fa-twitter"})])])])],1),o("main",{staticClass:"flex flex-start justify-center inset-shadow"},[o("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),o("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},s=[],a={name:"Hero",data(){return{title:"QWindow",tagline:"Floating, movable, resizable Windows for your Quasar App",byline:"Created and maintained by Jeff Galbraith",bylineTwitter:"https://twitter.com/jgalbraith64",quasarDesc:"A Quasar Framework Component and App Extension",locationUrl:"https://github.com/quasarframework/quasar-ui-qwindow",donateUrl:"https://github.com/sponsors/hawkeye64",hasInteractiveDemo:!1}}},i=a,l=o("2877"),r=o("9c40"),c=o("eebe"),h=o.n(c),d=Object(l["a"])(i,n,s,!1,null,null,null);t["a"]=d.exports;h()(d,"components",{QBtn:r["a"]})}}]);