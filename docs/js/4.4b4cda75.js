(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[4],{2514:function(e,t,n){"use strict";var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("section",{staticClass:"page-header"},[n("div",{staticClass:"donate"},[n("a",{attrs:{href:e.donateUrl,target:"_blank",title:"Donate"}},[n("i",{staticClass:"fas fa-heart",staticStyle:{color:"red"}})])]),n("div",{staticClass:"text-h1 project-name"},[e._v(e._s(e.title))]),n("div",{staticClass:"text-h2 project-tagline"},[e._v(e._s(e.tagline))]),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.locationUrl,target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),e.hasInteractiveDemo?n("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}}):e._e(),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.donateUrl,target:"_blank",label:"Donate","no-caps":"",flat:""}}),n("div",{staticClass:"row justify-evenly items-center q-ma-sm"},[n("div",{staticClass:"quasar"},[e._v(e._s(e.quasarDesc))]),n("div",{staticClass:"byline"},[e._v(e._s(e.byline)+" "),n("a",{attrs:{href:e.bylineTwitter,target:"_blank",title:"Twitter"}},[n("i",{staticClass:"fab fa-twitter"})])])])],1),n("main",{staticClass:"flex flex-start justify-center inset-shadow"},[n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},i=[],s={name:"Hero",data:function(){return{title:"QWindow",tagline:"Floating, movable, resizable Windows for your Quasar App",byline:"Created and maintained by Jeff Galbraith",bylineTwitter:"https://twitter.com/jgalbraith64",quasarDesc:"A Quasar Framework Component and App Extension",locationUrl:"https://github.com/quasarframework/quasar-ui-qwindow",donateUrl:"https://github.com/sponsors/hawkeye64",hasInteractiveDemo:!1}}},a=s,r=n("2877"),l=n("9c40"),d=n("eebe"),c=n.n(d),h=Object(r["a"])(a,o,i,!1,null,null,null);t["a"]=h.exports;c()(h,"components",{QBtn:l["a"]})},"8b24":function(e,t,n){"use strict";n.r(t);var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("hero",[n("q-markdown",{attrs:{src:e.markdown,toc:""},on:{data:e.onToc}}),n("json-api-viewer",{attrs:{title:"QWindow API",json:e.json}}),n("q-markdown",[e._v("\n# Donate\nIf you appreciate the work that went into this, please consider donating to [Quasar](https://donate.quasar.dev) or [Jeff](https://github.com/sponsors/hawkeye64).\n\n---\n\nThis page created with [QMarkdown](https://quasarframework.github.io/quasar-ui-qmarkdown), another great Quasar App Extension.\n    ")]),n("q-page-scroller",{attrs:{position:"bottom-right","scroll-offset":150,offset:[18,18]}},[n("q-btn",{class:{"text-black bg-grey-4":e.$q.dark.isActive,"text-white bg-primary":!e.$q.dark.isActive},attrs:{fab:"",icon:"keyboard_arrow_up"}})],1)],1)},i=[],s=n("2514"),a="QWindow\n===\n\nQWindow is a [Quasar App Extension](https://quasar.dev/app-extensions/introduction). It allows you to have a floating, movable, and resizable HTML windows in your Quasar App.\n\n![QWindow](qwindow.png \"QWindow\" =800x800)\n\nThis work is currently in `beta` and there are expected changes while things get worked out. Your help with testing is greatly appreciated. Suggestions and PRs welcomed.\n\n# Install\nTo add this App Extension to your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext add @quasar/qwindow\n```\n\n# Uninstall\nTo remove this App Extension from your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext remove @quasar/qwindow\n```\n\n# Describe\nYou can use `quasar describe QWindow`\n\n# Docs\nCan be found [here](https://quasarframework.github.io/quasar-ui-qwindow).\n\n# Examples\nCan be found [here](https://quasarframework.github.io/quasar-ui-qwindow/examples).\n\n# Demo (source) Project\nCan be found [here](https://github.com/quasarframework/quasar-ui-qwindow/tree/master/demo).\n\n# A Word About QWindow\nWhen floating, QWindow uses a Vue Portal. A Vue Portal is another instance of a Vue root useful for containing a Vue component so that it is not constrained by its parent element in any way. As such, the code has to calculate the position of the QWindow all the time, relative to the top of the page and the top of the view port. Because of this, when scrolling with the mouse or keyboard, the floating QWindow may appear to be a bit \"jumpy\". This is a result of the browser sending scroll positions in increments. One notch of a mouse scroll can be 52px. This cannot be helped as this is how browsers work.\n\n# Working with QWindow\nWorking with QWindow can be very minimal. Almost all essential properties have defaults. Here is an example of using QWindow:\n```html\n  <q-window\n    v-model=\"visible\"\n    title=\"QWindow Basic\"\n    :actions=\"['embedded']\"\n    :content-class=\"$q.dark.isActive ? 'bg-grey-8' : 'bg-grey-1'\"\n  >\n    <div class=\"q-pa-md fit\">\n      This is the \"default\" slot content\n    </div>\n  </q-window>\n```\n\nIn the example above, QWindow is not gven the `start-x` and `start-y` positions. In this case, QWindow uses an algorithm that prevents multiple instantiated windows from sitting on top of each other (the x and y are offset 10px for each window).\n\nIt is a good idea to provide the `content-class` unless your slotted content can control the background and foreground colors, otherwise your content background may be transparent.\n\n## Embedding and Floating\nIn the above example, the QWindow will immediately be floating. If you want it embedded, simply provide the `embedded` property.\n\n```html\n  <q-window\n    v-model=\"visible\"\n    title=\"QWindow Basic\"\n    embedded\n    :actions=\"['embedded']\"\n    :content-class=\"$q.dark.isActive ? 'bg-grey-8' : 'bg-grey-1'\"\n  >\n    <div class=\"q-pa-md fit\">\n      This is the \"default\" slot content\n    </div>\n  </q-window>\n```\n\nYou can set the initial state by providing one of the following: `embedded`, `pinned`, `maximize`, or `fullscreen`. Some states conflict, so if one is detected before the other, then the first state will be used and the latter won't.\n\n## Moving and Resizing\nWhen a QWindow is floating, it can be moved (via titlebar), or resized (via the grippers).\n\n![Floating](qwindow-floating.png \"Floating\" =300x300)\n\nQWindow's grippers can be controlled with the `resizable` property (array). To turn on specific grippers, you specify in the array what you want.\n\n```js\n[ 'top', 'left', 'right', 'bottom', 'top-left', 'top-right', 'bottom-left', 'bottom-right']\n```\n\n![No Grippers on Top](qwindow-no-resize-top.png \"No Grippers on Top\" =300x300)\n\n## Grippers\nThe grippers can be changed to be round with the `round-grippers` property.\n\n![Round Grippers](qwindow-round-grippers.png \"Round Grippers\" =300x300)\n\nOr, by using the `hide-grippers` property you can turn off the visual display of the grippers. In this case, instead of being able to grip the \"boxes\" in order to resize you can click anywhere along the sides, as well as the corners.\n\n![Hide Grippers](qwindow-hide-grippers.png \"Hide Grippers\" =300x300)\n\nAnd, of course, you can stylize the grippers with the `gripper-border-color` and `gripper-background-color` properties.\n\n![Colored Grippers](qwindow-colored-grippers.png \"Colored Grippers\" =300x300)\n\n## Pinning\nWhen a QWindow is pinned, it can no longer be moved or resized. Try using the `auto-pin` property. When the QWindow is selected, the grippers become visible. When it is not selected, the QWindow will automatically pin (no grippers).\n\n## Scrolling\nThe \"normal\" behavior of QWindow is to \"stay-in-place\". Meaning, if you scroll the document, the QWindow will stay in it's relative position to the browser's viewport. You can turn off this behavior, by setting the `scroll-with-window` property. In this case, the QWindow will scroll with the document.\n\n:::tip\nUsing the mouse to scroll will cause the QWindow to be a bit \"jerky\". This is because a mouse does not cause a pixel-by-pixel scroll, but causes a \"jump\" in the scroll position. Same with using the keyboard to scroll. Try scrolling with the scrollbar to see the difference.\n:::\n\n## Modifying the Menu\nThe items in a menu can be replaced or augmented. You can use the `menu-func` (function) property. This function is sent a copy (array of objects) of the menu data and can be modified with an appropriate object defining the state of a menu item. You can also use the special keyword `separator` to have a separator inserted into the menu.\n\n![Modified Menu](qwindow-modified-menu.png \"Modified Menu\" =200x300)\n\nThe HTML:\n```html\n:menu-func=\"updateMenu\"\n```\n\nand, then in JavaScript:\n```js\nupdateMenu (menuItems) {\n  if (this.$refs.window.isEmbedded !== true && this.$refs.window.isFullscreen !== true) {\n    if (menuItems[menuItems.length - 1].key === 'visible') {\n      menuItems.splice(menuItems.length - 1, 0, 'separator')\n    }\n    const sendToBack = {\n      key: 'sendtoback',\n      state: false,\n      on: {\n        label: 'Send to Back',\n        icon: '',\n        func: this.sendToBack1\n      },\n      off: {\n        label: 'Send to Back',\n        icon: '',\n        func: this.sendToBack1\n      }\n    }\n    const bringToFront = {\n      key: 'bringtofront',\n      state: false,\n      on: {\n        label: 'Bring to Front',\n        icon: '',\n        func: this.bringToFront1\n      },\n      off: {\n        label: 'Bring to Front',\n        icon: '',\n        func: this.bringToFront1\n      }\n    }\n    const centerWindow = {\n      key: 'centerwindow',\n      state: false,\n      on: {\n        label: 'Center Window',\n        icon: '',\n        func: this.centerWindow1\n      },\n      off: {\n        label: 'Center Window',\n        icon: '',\n        func: this.centerWindow1\n      }\n    }\n    menuItems.splice(menuItems.length, 0, 'separator')\n    menuItems.splice(menuItems.length, 0, sendToBack)\n    menuItems.splice(menuItems.length, 0, bringToFront)\n    menuItems.splice(menuItems.length, 0, 'separator')\n    menuItems.splice(menuItems.length, 0, centerWindow)\n  }\n}\n```\n\n## Changing Icons and Language\nThe default icon set for QWindow is the Material Design icons. English is also the default language. If you would like to change either of these, you can use the `icon-set` property. This is an object that represents all icons and language to use in different states. You do not have to completely replace this, only the bits you want to change.\n\nThe example below is using Fontawesome to rerplace the Material Design icons and the English has been modified. In this same manner, you can also replace the language to whatever suits yur needs.\n\n![Icons and Language](qwindow-icons-and-language.png \"Icons and Language\" =200x300)\n\n```js\n{\n  visible: {\n    on: {\n      icon: 'fas fa-eye',\n      label: 'Show Me!'\n    },\n    off: {\n      icon: 'fas fa-eye-slash',\n      label: 'Hide Me!'\n    }\n  },\n  embedded: {\n    on: {\n      icon: 'fas fa-lock',\n      label: 'Embed Me!'\n    },\n    off: {\n      icon: 'fas fa-unlock',\n      label: 'Float Me!'\n    }\n  },\n  pinned: {\n    on: {\n      icon: 'fas fa-map-marker',\n      label: 'Pin Me!'\n    },\n    off: {\n      icon: 'fas fa-map-marker-alt',\n      label: 'Unpin Me!'\n    }\n  },\n  maximize: {\n    on: {\n      icon: 'fas fa-window-maximize',\n      label: 'To the Max!'\n    },\n    off: {\n      icon: 'fas fa-window-restore',\n      label: 'Restore me!'\n    }\n  },\n  fullscreen: {\n    on: {\n      icon: 'fas fa-expand',\n      label: 'Enter fullscreen mode'\n    },\n    off: {\n      icon: 'fas fa-compress',\n      label: 'Leave fullscreen mode'\n    }\n  }\n}\n```\n\nEach key within the whole of this structure is optional. You can replace a part of it or all of it. If you have `Material Design` icons turned off in your `quasar.conf.js`, then you need to set all the icons.\nYou do not need to include the `label` property unless you are:\n1. Changing the wording, or\n2. Using a different language\n\n## Headless\nUsing the `headless` property displays a QWindow without the titlebar. There is no longer a menu displayed, so cannot be modified by the user. However, the user can still move or resize the QWindow. Try the `headless` property combined with the `auto-pin` property. A nice combination for website design software, as an example. Another option, by using the `isSelected` property, control the background color for a more professional look and feel.\n\n![Headless Deselected](qwindow-headless-deslected.png \"Headless Deselected\" =300x300)\n![Headless Selected](qwindow-headless-selected.png \"Headless Selected\" =300x300)\n\nThe style:\n```stylus\n<style lang=\"stylus\">\n.headless-deselected\n  background-color rgba(105,179,190,0.514) !important\n  border 1px dashed #e3cb47 !important\n\n.headless-selected\n  background-color rgba(172,83,83,0.42) !important\n  border 1px dashed #e3cb47 !important\n</style>\n```\n\nThe HTML:\n```html\n <q-window\n  ref=\"window\"\n  v-model=\"visible\"\n  headless\n  auto-pin\n  title=\"QWindow Headless/AutoPin Selected Styles\"\n  :start-x=\"200\"\n  :start-y=\"200\"\n  :height=\"150\"\n  :width=\"350\"\n  :actions=\"['embedded', 'pin', 'fullscreen']\"\n  embedded\n  :content-class=\"$refs.window && $refs.window.isSelected ? 'headless-selected' : 'headless-deselected'\"\n/>\n```\n",r=n("e4c8"),l={name:"PageIndex",components:{Hero:s["a"]},data:function(){return{markdown:a,json:r}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){this.$store.commit("common/toc",e)}}},methods:{onToc:function(e){e.push({id:"QWindow-API",label:"QWindow API",level:1,children:Array(0)}),e.push({id:"Donate",label:"Donate",level:1,children:Array(0)}),this.toc=e}}},d=l,c=n("2877"),h=n("5096"),p=n("9c40"),u=n("eebe"),m=n.n(u),y=Object(c["a"])(d,o,i,!1,null,null,null);t["default"]=y.exports;m()(y,"components",{QPageScroller:h["a"],QBtn:p["a"]})},e4c8:function(e){e.exports=JSON.parse('{"type":"component","meta":{"docsUrl":"https://quasarframework.github.io/quasar-ui-qwindow/docs"},"props":{"value":{"type":"Boolean","category":"model","default":true,"desc":"`v-model`; Controls visibility of the window"},"title":{"type":"String","category":"content","desc":"The title for the titlebar","examples":["title=\\"My Title\\""]},"dense":{"type":"Boolean","category":"style","desc":"Makes the titlebar height more dense"},"embedded":{"type":"Boolean","category":"state","desc":"If the QWindow should be initially embedded"},"pinned":{"type":"Boolean","category":"state","desc":"If the QWindow should be initially pinned"},"fullscreen":{"type":"Boolean","category":"state","desc":"If the QWindow should initially be fullscreen"},"maximized":{"type":"Boolean","category":"state","desc":"If the QWindow should be initially maximized"},"minimized":{"type":"Boolean","category":"state","desc":"If the QWindow should be initially minimized"},"no-menu":{"type":"Boolean","category":"state","desc":"Prevent the titlebar from drawing the menu (see [No Menu](/examples#No-Menu) example)"},"no-move":{"type":"Boolean","category":"state","desc":"Restricts the ability to `move` the QWindow. Moving can still be accomplished by resizing unless you restrict using the `resizable` property"},"no-resize":{"type":"Boolean","category":"state","desc":"Restricts the ability to `resize` the QWindow"},"resizable":{"type":"Array","tsType":"StringArray","category":"state","desc":"Contains an array of resize handle names that are allowed","default":"[\'top\',\'left\',\'right\',\'bottom\',\'top-left\',\'top-right\',\'bottom-left\',\'bottom-right\']","values":["top","left","right","bottom","top-left","top-right","bottom-left","bottom-right"],"examples":[":resizable=\\"[\'top\', \'top-left\', \'top-right\']\\"",":resizable=\\"[\'top\', \'top-left\', \'top-right\', \'bottom\', \'bottom-left\', \'bottom-right\']\\""]},"scroll-with-window":{"type":"Boolean","category":"state","desc":"When the document body is scrolled, the QWindow will scroll with it. Normal behavior is to \'stay-in-place\'"},"auto-pin":{"type":"Boolean","category":"state","desc":"QWindow will manage grippers depending on selected state"},"disabled":{"type":"Boolean","category":"state","desc":"If true, the QWindow will be in a disabled state"},"hide-toolbar-divider":{"type":"Boolean","category":"style","desc":"If the QWindow toolbar divider should be displayed"},"hide-grippers":{"type":"Boolean","category":"style","desc":"If the QWindow grippers should be hidden"},"round-grippers":{"type":"Boolean","category":"style","desc":"If the QWindow grippers should be round instead of square"},"headless":{"type":"Boolean","category":"style","desc":"Prevent titlebar from being drawn (see Headless example)"},"icon-set":{"type":"Object","category":"style","desc":"Allows icons and language to be changed. This is the menu definition which is modified and converted to a menu object for display purposes (see `menu-func`)","examples":["{ fullscreen: { on: { icon: \'fullscreen\', label: \'Enter fullscreen\' }, off: { icon: \'fullscreen_exit\', label: \'Leave fullscreen\' } } }"],"definition":{"identifier":{"type":"Object","desc":"Key for the object","values":["visible","embedded","pinned","maximize","fullscreen"],"definition":{"on":{"type":"Object","desc":"The `on` key identifier is used when the state is `true`","definition":{"icon":{"type":"String","desc":"The icon to display based on state is `true` (can be empty)"},"label":{"type":"String","desc":"The label to display based on state is `true`"}}},"off":{"type":"Object","desc":"The `off` key identifier is used when the state is `false`","definition":{"icon":{"type":"String","desc":"The icon to display based on state is `false` (can be empty)"},"label":{"type":"String","desc":"The label to display based on state is `false`"}}}}}}},"start-x":{"type":["Number","String"],"category":"state","desc":"The initial starting X position (in px)","examples":["start-x=\\"200\\""]},"start-y":{"type":["Number","String"],"category":"state","desc":"The initial starting Y position (in px)","examples":["start-y=\\"200\\""]},"width":{"type":["Number","String"],"category":"state","desc":"The initial starting width size (in px)","examples":["width=\\"400\\""]},"height":{"type":["Number","String"],"category":"state","desc":"The initial starting height size (in px)","examples":["height=\\"300\\""]},"actions":{"type":"Array","category":"state","desc":"The actions that can be applied to the QWindow","default":"[\'pin\', \'embedded\', \'maximize\', \'close\', \'fullscreen\']","values":["pin","embedded","maximize","close","fullscreen"],"examples":["[\'pin\', \'embedded\']","[\'pin\', \'embedded\', \'fullscreen\']"]},"color":{"type":"String","category":"style","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or any CSS color","examples":["color=\\"blue-grey-8\\""]},"background-color":{"type":"String","category":"style","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or any CSS color","examples":["background-color=\\"orange-10\\""]},"gripper-border-color":{"type":"String","category":"style","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or any CSS color","examples":["gripper-border-color=\\"green-6\\""]},"gripper-background-color":{"type":"String","category":"style","desc":"Any color from the [Quasar Color Pallete](https://quasar.dev/style/color-palette) or any CSS color","examples":["gripper-background-color=\\"yellow-6\\""]},"menu-func":{"type":"Function","category":"style","examples":[":menu-func=\\"myMenuModifier\\""],"desc":"Allows the menu to me modified before being displayed","returns":{"type":"Object","desc":"The modified menu object"},"params":{"collection":{"type":"Array","desc":"An array of menu item objects passed to the function","definition":{"key":{"type":"String","desc":"The key representing state data","examples":["embedded","fullscreen"]},"state":{"type":"Boolean","desc":"If the state is true (uses `on`) or false (uses `off`)"},"on":{"type":"Object","desc":"Object definition used when the state is true","definition":{"icon":{"type":"String","desc":"The icon to display when state for this menu item is true (can be empty)"},"label":{"type":"String","desc":"The label to display when state for this menu item is true"},"func":{"type":"Function","desc":"The function to call when the state is changed to true","params":null,"returns":{"type":"Boolean"}}}},"off":{"type":"Object","desc":"Object definition used when the state is false","definition":{"icon":{"type":"String","desc":"The icon to display when state for this menu item is false (can be empty)"},"label":{"type":"String","desc":"The label to display when state for this menu item is false"},"func":{"type":"Function","desc":"The function to call when the state is changed to false","params":null,"returns":{"type":"Boolean"}}}}}}}},"border-width":{"type":"String","default":"1px","category":"style","desc":"This can be any CSS unit (including unit)","examples":["border-width=\\"1px\\"","border-width=\\".15rem\\""]},"border-style":{"type":"String","default":"solid","category":"style","desc":"This can be any CSS border style","examples":["border-style=\\"solid\\"","border-style=\\"dashed\\""]},"titlebar-style":{"type":["String","Object","Array"],"category":"style","desc":"Style definitions to be attributed to the titlebar","examples":["titlebar-style=\\"background-color: #ff0000\\"",":titlebar-style=\\"{ backgroundColor: \'#ff0000\' }\\""]},"titlebar-class":{"type":["String","Object","Array"],"category":"style","desc":"Class definitions to be attributed to the titlebar","examples":["titlebar-class=\\"my-special-class\\"",":titlebar-class=\\"{ \'my-special-class\': [Boolean condition] }\\""]},"content-style":{"type":["String","Object","Array"],"category":"style","desc":"Style definitions to be attributed to the content","examples":["content-style=\\"background-color: #ff0000\\"",":content-style=\\"{ backgroundColor: \'#ff0000\' }\\""]},"content-class":{"type":["String","Object","Array"],"category":"style","desc":"Class definitions to be attributed to the content","examples":["content-class=\\"my-special-class\\"",":content-class=\\"{ \'my-special-class\': [Boolean condition] }\\""]}},"slots":{"default":{"desc":"This is the default slotted content"}},"scopedSlots":{"default":{"desc":"This is the default slotted content. An object is returned with a key zIndex. This value is useful to set the slotted content to zIndex + 1 if `z-order` is a concern (for instance, when using QDrawer)","scope":{"zIndex":{"type":"Number","desc":"The current `z-index` of the QWindow"}}},"titlebar":{"type":"Array","desc":"See `computedMenuData` in the `Computed` section"}},"events":{"input":{"desc":"`v-model`; When the QWindow is displayed or hidden","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"embedded":{"desc":"When the QWindow enters or leaves the embedded state","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"pinned":{"desc":"When the QWindow enters or leaves the pinned state","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"maximize":{"desc":"When the QWindow enters or leaves the maximize state","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"fullscreen":{"desc":"When the QWindow enters or leaves the fullscreen state","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"selected":{"desc":"When the QWindow is selected or not","params":{"state":{"type":"Boolean","desc":"Current state of the event"}}},"position":{"desc":"When the QWindow is moved or resized","params":{"position":{"type":"Object","desc":"The object containing position data for the QWindow","definition":{"left":{"type":"Number","desc":"The left position relative to the viewport"},"top":{"type":"Number","desc":"The top position relative to the viewport"},"width":{"type":"Number","desc":"The width of the QWindow"},"height":{"type":"Number","desc":"The height of the QWindow"},"scrollX":{"type":"Number","desc":"The left position relative to the horizontal scroll"},"scrollY":{"type":"Number","desc":"The top position relative to the vertical scroll"}}}}},"beforeDrag":{"desc":"When the QWindow is about to be moved or resized","params":{"event":{"type":"Object","desc":"The event associated with the drag"}}},"afterDrag":{"desc":"When the QWindow is done moving or resizing","params":{"event":{"type":"Object","desc":"The event associated with the drag"}}}},"methods":{"show":{"desc":"Makes the QWindow visible"},"hide":{"desc":"Makes the QWindow hidden"},"lock":{"desc":"Makes the QWindow embedded"},"unlock":{"desc":"Makes the QWindow floating"},"pin":{"desc":"Makes the QWindow pinned (fixed at location)"},"unpin":{"desc":"Makes the QWindow non-pinned (movable, resizable, etc)"},"maximize":{"desc":"Makes the QWindow maximized"},"minimize":{"desc":"Makes the QWindow minimized"},"restore":{"desc":"Restores the QWindow (from maximized)"},"fullscreenEnter":{"desc":"Makes the QWindow enter fullscreen"},"fullscreenLeave":{"desc":"Makes the QWindow leave fullscreen"},"toggleFullscreen":{"desc":"Toggles the QWindow fullscreen state"},"bringToFront":{"desc":"Brings the QWindow to the front layer"},"sendToBack":{"desc":"Send the QWindow to the back layer"},"centerWindow":{"desc":"Centers the QWindow on the visible view port"},"setX":{"desc":"Programmatically set the x position","params":{"x":{"type":"Number","desc":"The x position"}}},"setY":{"desc":"Programmatically set the y position","params":{"y":{"type":"Number","desc":"The y position"}}},"setXY":{"desc":"Programmatically set both the x and y positions","params":{"x":{"type":"Number","desc":"The x position"},"y":{"type":"Number","desc":"The y position"}}},"setWidth":{"desc":"Programmatically set the QWindow width","params":{"width":{"type":"Number","desc":"The width"}}},"setHeight":{"desc":"Programmatically set the QWindow height","params":{"height":{"type":"Number","desc":"The height"}}},"canDo":{"desc":"Pass in an action, like `embedded` or `close` and will return true or false if it can be done at this time. Useful for determining items in the menu","values":["embedded","pinned","maximize","fullscreen","close"],"params":{"state":{"type":"String","desc":"The action to test against","examples":["embedded","close"]}},"returns":{"type":"Boolean","desc":"true if the passed in action can be done at this time otherwise false"}}},"computed":{"isVisible":{"type":"Boolean","desc":"true if the QWindow is currently visible, otherwise false"},"isEmbedded":{"type":"Boolean","desc":"true if the QWindow is currently embedded, otherwise false"},"isFloating":{"type":"Boolean","desc":"true if the QWindow is currently floating, otherwise false"},"isPinned":{"type":"Boolean","desc":"true if the QWindow is currently pinned, otherwise false"},"isMaximized":{"type":"Boolean","desc":"true if the QWindow is currently maximized, otherwise false"},"isMinimized":{"type":"Boolean","desc":"true if the QWindow is currently minimized, otherwise false"},"isEnabled":{"type":"Boolean","desc":"true if the QWindow is currently enabled, otherwise false"},"isDisabled":{"type":"Boolean","desc":"true if the QWindow is currently disabled, otherwise false"},"isFullscreen":{"type":"Boolean","desc":"true if the QWindow is currently fullscreen, otherwise false"},"isSelected":{"type":"Boolean","desc":"true if the QWindow is currently selected, otherwise false"},"isDragging":{"type":"Boolean","desc":"true if the QWindow is currently being moved or resized, otherwise false"},"canDrag":{"type":"Boolean","desc":"true if all criteria aligns that make the QWindow movable/resizable"},"computedToolbarHeight":{"type":"Number","desc":"The toolbar height (when toolbar is visible)"},"computedLeft":{"type":"Number","desc":"The left position of the QWindow"},"computedTop":{"type":"Number","desc":"The top position of the QWindow"},"computedRight":{"type":"Number","desc":"The right position of the QWindow"},"computedBottom":{"type":"Number","desc":"The bottom position of the QWindow"},"computedWidth":{"type":"Number","desc":"The width of the QWindow"},"computedHeight":{"type":"Number","desc":"The height of the QWindow"},"computedScrollX":{"type":"Number","desc":"The x position plus scroll width of the QWindow"},"computedScrollY":{"type":"Number","desc":"The y position plus scroll height of the QWindow"},"computedPosition":{"type":"Object","desc":"The current position of the QWindow","returns":{"type":"Object","definition":{"left":{"type":"Number","desc":"The left position relative to the viewport"},"top":{"type":"Number","desc":"The top position relative to the viewport"},"width":{"type":"Number","desc":"The width of the QWindow"},"height":{"type":"Number","desc":"The height of the QWindow"},"scrollX":{"type":"Number","desc":"The left position relative to the horizontal scroll"},"scrollY":{"type":"Number","desc":"The top position relative to the vertical scroll"}}}},"computedActions":{"type":"Array","desc":"Contains an array of currently allowed states (like `embedded`, `pinned`, `visible`, etc). Useful for menu determination. For instance, if the length is 0, then do not show a menu"},"computedMenuData":{"type":"Array","desc":"This is the actual data used in determining the menu. Be aware that this data is a copy and direct manipulation may be lost. If it is needed, it should be retrieved before each use"},"hasStateInfo":{"type":"Boolean","desc":"true if this QWindow has state info"}}}')}}]);