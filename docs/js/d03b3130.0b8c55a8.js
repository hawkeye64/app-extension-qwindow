(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["d03b3130"],{"0960":function(e,n,t){"use strict";t.r(n);var a=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("hero",[a("div",{staticClass:"q-markdown"},[a("q-markdown",[e._v('\n**QWindow** allows for a floating, movable, resizable window above the regular HTML elements.\n\nIt is quite possible to start a QWindow off as `floating`, but for these examples, the window must start off as `embedded` so there isn\'t a lot of windows popping up and knowing which example they come from.\n\nThis means, you must access the menu content to make it `floating`.\n\nOnce a window is `floating`, unless restricted, you can move it (via the titlebar) or resize it (via sides and corners).\n\n:::tip\nAll QWindows are initially relative to the browser\'s view. This means, even if you scroll, it will stay in-place. If you want the QWindow to scroll with the document, then set the `scroll-with-window` to `true`.\n:::\n\n:::tip\nUsing the mouse to scroll will cause the QWindow to be a bit "jerky". This is because a mouse does not cause a pixel-by-pixel scroll, but causes a "jump" in the scroll position. Try scrolling with the scrollbar to see the difference.\n:::\n\n:::info\nWhen you move or resize a QWindow in `floating` mode, then `embed` it, if you make it `floating` again, it\'s last position is retained.\n:::\n      ')]),a("example-title",{attrs:{title:"Basic"}}),a("example-card",{attrs:{title:"Embedded/Floating",name:"Basic","tag-parts":e.getTagParts(t("2123").default)}}),a("q-markdown",[e._v("\nYou might have noticed on the previous example, when the QWindow is floating, that when you scroll the document that the QWindow stays in-place.\n\nTo prevent the in-place and scroll with the document, use the `scroll-with-window` property.\n\nIf you make this window `floating`, you will have to scroll up to see it. It's position is now relative to the document and not to the view port.\n\nMake sure to `embed` the `floating` window before moving on to the next example.\n      ")]),a("example-card",{attrs:{title:"Scroll With Window",name:"ScrollWithWindow","tag-parts":e.getTagParts(t("9006").default)}}),a("q-markdown",[e._v("\nActions allow the window to be in different states.\n\nThe available actions are:\n1. `embedded`\n2. `pinned`\n3. `maximize`\n4. `fullscreen`\n5. `close`\n\nAll of the actions are self-explanatory, except for `pinned`. When a QWindow is `pinned` this means it can no longer be moved or resized.\n\nIn the example below, we will use all actions, except for `close` which will be discussed in a later example.\n\n`float` the example window to see the actions in the menu.\n      ")]),a("example-card",{attrs:{title:"Actions",name:"Actions","tag-parts":e.getTagParts(t("652b").default)}}),a("example-card",{attrs:{title:"Color",name:"Color","tag-parts":e.getTagParts(t("ff17").default)}}),a("example-card",{attrs:{title:"Border",name:"Border","tag-parts":e.getTagParts(t("9a60").default)}}),a("example-card",{attrs:{title:"Titlebar Style",name:"TitlebarStyle","tag-parts":e.getTagParts(t("5117").default)}}),a("q-markdown",[e._v("\nIf you don't like the **grippers** you can hide them with the `hide-grippers` property. In this case, there will be invisible bars running on the sides, as well as all corners that allow for resizing. Hover the mouse over these areas to see the cursor change.\n      ")]),a("example-card",{attrs:{title:"Hide Grippers",name:"GripperNone","tag-parts":e.getTagParts(t("177d").default)}}),a("example-card",{attrs:{title:"Round Grippers",name:"GripperRound","tag-parts":e.getTagParts(t("f136").default)}}),a("example-title",{attrs:{title:"Advanced"}}),a("q-markdown",[e._v("\nYou can provide the action `close` in the array of actions. This will add a **Close** option to the menu. Essentually, the window is really hidden. It is up to the developer to provide a way for the QWindow to be re-displayed by setting the `visible` property.\n      ")]),a("example-card",{attrs:{title:"Close Action",name:"CloseAction","tag-parts":e.getTagParts(t("f4e0").default)}}),a("q-markdown",[e._v("\nThe example below is just showing more content in the default slot.\n      ")]),a("example-card",{attrs:{title:"Scroll Area",name:"ScrollArea","tag-parts":e.getTagParts(t("933a").default)}}),a("q-markdown",[e._v("\nOne situation you may run into is when there is more than one QWindow components being displayed and they overlap each other. In this case, there may be no way easy to change their `z-index`. To resolve this, you can use the `bring-to-front-after-drag` property. The QWindow that is last dragged (or resized) will be moved to the top.\n\nIn the example below, you will need to float both QWindows to see this in action.\n      ")]),a("example-card",{attrs:{title:"Bring to Front After Drag",name:"BringToFrontAfterDrag","tag-parts":e.getTagParts(t("ac31").default)}}),a("q-markdown",[e._v("\nThere is opportunity to modify the displayed menu just before it is displayed. In the example below, two functions are added: `Bring to Front` and `Send to Back` where the appropriate functionality will be called.\n\nYou can add to the menu the text `separator` which will put a separator between items. Other than that, the rest of the items must be objects that look like this:\n```js\nlet sendToBack = {\n  key: 'sendtoback',\n  state: false,\n  on: {\n    label: 'Send to Back',\n    icon: '',\n    func: this.sendToBack\n  },\n  off: {\n    label: 'Send to Back',\n    icon: '',\n    func: this.sendToBack\n  }\n}\n```\nWhen `state` is `true`, then the `on` object will be used, otherwise the `off` object.\n\nIn the example below, menu items are added only if the QWindow is floating. Use the menu to change the `z-order` manually.\n\nAdditionally, one other menu item is being added that you can try out: `Center Window`.\n      ")]),a("example-card",{attrs:{title:"Modify Menu",name:"ModifyMenu","tag-parts":e.getTagParts(t("6a74").default)}}),a("q-markdown",[e._v("\nThe example below is using the default scoped slot. When this is done, data (an object) is passed into the scoped slot that contains the current `zIndex`. Usining this information, it is used to control the `z-order` of the `QDrawer` components, so when in fullscreen mode, they are properly displayed.\n      ")]),a("example-card",{attrs:{title:"Complex Slot",name:"ComplexSlot","tag-parts":e.getTagParts(t("8788").default)}})],1)])},o=[],i=t("2514"),s=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("h1",{staticClass:"q-markdown--heading-h1 q-markdown--title-heavy example-title",attrs:{id:e.slugifiedTitle},on:{click:function(n){return e.copyHeading(e.slugifiedTitle)}}},[e._v(e._s(e.title))])},r=[];t("a481");function l(e){var n=window.location.origin+window.location.pathname+"#"+e,t=document.createElement("textarea");t.className="fixed-top",t.value=n,document.body.appendChild(t),t.focus(),t.select(),document.execCommand("copy"),document.body.removeChild(t),this.$q.notify({message:"Anchor has been copied to clipboard.",color:"white",textColor:"primary",icon:"done",position:"top",timeout:2e3})}function d(e){return encodeURIComponent(String(e).trim().replace(/\s+/g,"-"))}var c={name:"ExampleTitle",props:{title:{type:String,required:!0}},computed:{slugifiedTitle:function(){return d(this.title)}},methods:{copyHeading:l}},u=c,m=t("2877"),h=Object(m["a"])(u,s,r,!1,null,null,null),p=h.exports,f=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("section",{staticClass:"q-pa-md overflow-auto",attrs:{id:e.slugifiedTitle}},[t("q-card",{staticClass:"no-shadow",attrs:{flat:"",bordered:""}},[t("q-toolbar",[t("q-ribbon",{attrs:{position:"left",color:"rgba(0,0,0,.58)","background-color":"#c0c0c0","leaf-color":"#a0a0a0","leaf-position":"bottom",decoration:"rounded-out"}},[t("q-toolbar-title",{staticClass:"example-title",staticStyle:{padding:"5px 20px"},on:{click:function(n){return e.copyHeading(e.slugifiedTitle)}}},[t("span",{staticClass:"ellipsis"},[e._v(e._s(e.title))])])],1)],1),t("q-separator"),t("q-expansion-item",{attrs:{group:"someGroup",caption:"Code"}},[t("q-card",[t("q-tabs",{staticClass:"text-grey",attrs:{dense:"","active-color":"primary","indicator-color":"primary",align:"left","narrow-indicator":""},model:{value:e.tab,callback:function(n){e.tab=n},expression:"tab"}},[e.parts.template?t("q-tab",{attrs:{name:"template",label:"Template"}}):e._e(),e.parts.script?t("q-tab",{attrs:{name:"script",label:"Script"}}):e._e(),e.parts.style?t("q-tab",{attrs:{name:"style",label:"Style"}}):e._e()],1),t("q-separator"),t("q-tab-panels",{attrs:{animated:""},model:{value:e.tab,callback:function(n){e.tab=n},expression:"tab"}},[e.parts.template?t("q-tab-panel",{attrs:{name:"template"}},[t("q-markdown",{attrs:{src:e.parts.template}})],1):e._e(),e.parts.script?t("q-tab-panel",{attrs:{name:"script"}},[t("q-markdown",{attrs:{src:e.parts.script}})],1):e._e(),e.parts.style?t("q-tab-panel",{attrs:{name:"style"}},[t("q-markdown",{attrs:{src:e.parts.style}})],1):e._e()],1)],1)],1),t("q-separator"),t(e.name,{tag:"component",staticStyle:{overflow:"hidden"}})],1)],1)},w=[],b={name:"ExampleCard",components:{Basic:function(){return t.e("2d20edd2").then(t.bind(null,"b0d2"))},Actions:function(){return t.e("2d0c4bd4").then(t.bind(null,"3bb1"))},ScrollWithWindow:function(){return t.e("2d0aa558").then(t.bind(null,"1124"))},Color:function(){return t.e("2d0c84a7").then(t.bind(null,"53f9"))},Border:function(){return t.e("2d0cc288").then(t.bind(null,"4d79"))},TitlebarStyle:function(){return t.e("2d2104a6").then(t.bind(null,"b6ea"))},GripperNone:function(){return t.e("2d225c03").then(t.bind(null,"e673"))},GripperRound:function(){return t.e("2d0e88db").then(t.bind(null,"8a84"))},CloseAction:function(){return t.e("2d0a40ca").then(t.bind(null,"057f"))},ScrollArea:function(){return t.e("2d0ba324").then(t.bind(null,"35d0"))},BringToFrontAfterDrag:function(){return t.e("2d0d0631").then(t.bind(null,"6881"))},ModifyMenu:function(){return t.e("2d0e941f").then(t.bind(null,"8d85"))},ComplexSlot:function(){return t.e("2d208fdd").then(t.bind(null,"a6c5"))}},props:{title:{type:String,required:!0},name:{type:String,required:!0},tagParts:{type:Object,default:function(){}}},data:function(){return{tab:"template",parts:{}}},mounted:function(){this.updateParts()},computed:{slugifiedTitle:function(){return d(this.title)}},methods:{copyHeading:l,updateParts:function(){for(var e in this.parts={},this.tagParts)""!==this.tagParts[e]&&(this.parts[e]="```\n"+this.tagParts[e]+"\n```")}}},g=b,y=Object(m["a"])(g,f,w,!1,null,null,null),v=y.exports,q=function(e){var n,t={},a=k(e);a&&a.length>0&&(t.template=a);var o=document.createElement("html");return o.innerHTML=e,n=o.getElementsByTagName("script"),n.length>0&&(t.script=n[0].outerHTML),n=o.getElementsByTagName("style"),n.length>0&&(t.style=n[0].outerHTML),t},k=function(e){var n="";if(e&&e.length>0){var t="<template",a="</template>",o=e.indexOf(t),i=e.lastIndexOf(a);o>-1&&i>-1&&(n=e.substring(o,i+a.length))}return n},T={name:"Examples",components:{Hero:i["a"],ExampleTitle:p,ExampleCard:v},data:function(){return{tempToc:[]}},mounted:function(){this.toc=[],this.tempToc=[],this.addToToc("Basic"),this.addToToc("Embedded/Floating",2),this.addToToc("Fixed Position",2),this.addToToc("Actions",2),this.addToToc("Color",2),this.addToToc("Border",2),this.addToToc("Titlebar Style",2),this.addToToc("Hide Grippers",2),this.addToToc("Round Grippers",2),this.addToToc("Advanced"),this.addToToc("Close Action",2),this.addToToc("Scroll Area",2),this.addToToc("Bring to Front After Drag",2),this.addToToc("Modify Menu",2),this.addToToc("Complex Slot",2),this.toc=this.tempToc},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){this.$store.commit("common/toc",e)}}},methods:{getTagParts:q,addToToc:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,t=d(e);this.tempToc.push({children:[],id:t,label:e,level:n})}}},x=T,W=(t("e872"),Object(m["a"])(x,a,o,!1,null,null,null));n["default"]=W.exports},"177d":function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Hide Grippers"\n      hide-grippers\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},2123:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Basic"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},2514:function(e,n,t){"use strict";var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("section",{staticClass:"page-header"},[t("h1",{staticClass:"project-name"},[e._v("QWindow")]),t("h2",{staticClass:"project-tagline"}),t("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://github.com/hawkeye64/app-extension-qwindow",target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),t("q-btn",{staticClass:"btn",attrs:{type:"a",href:"https://donate.quasar.dev",target:"_blank",label:"Donate","no-caps":"",flat:""}})],1),t("main",{staticClass:"flex flex-start justify-center inset-shadow"},[t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),t("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg bg-white shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},o=[],i={name:"Hero"},s=i,r=t("2877"),l=Object(r["a"])(s,a,o,!1,null,null,null);n["a"]=l.exports},5117:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Titlebar Style"\n      :titlebarStyle="{ borderBottom: \'1px solid #BB714F\', fontStyle: \'italic\', fontSize: \'2em\' }"\n      :contentStyle="{ border: \'1px solid #BB714F\' }"\n      border-width="1px"\n      border-style="solid"\n      color="#BB714F"\n      background-color="#C4C27A"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},"652b":function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Actions"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},"6a74":function(e,n,t){"use strict";t.r(n),n["default"]="<template>\n  <div>\n    <q-window\n      ref=\"window1\"\n      title=\"QWindow Modify Menu 1\"\n      :startX=\"50\"\n      :startY=\"50\"\n      :height=\"500\"\n      :width=\"600\"\n      :menu-func=\"updateMenu1\"\n      bring-to-front-after-drag\n      :actions=\"['embedded', 'pin', 'maximize', 'fullscreen']\"\n      embedded\n      content-class=\"bg-grey-1\"\n    >\n      <div class=\"q-pa-md fit scroll\">\n        <q-scroll-area style=\"width: 100%; height: 100%\">\n          <div class=\"text-h4\">Quasar Framework</div>\n          <div class=\"quasar\"><img src=\"https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" alt=\"Quasar Framework\" height=\"150\" width=\"150\"/></div>\n          <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n          <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n        </q-scroll-area>\n      </div>\n    </q-window>\n    <q-window\n      ref=\"window2\"\n      title=\"QWindow Modify Menu 2\"\n      :startX=\"100\"\n      :startY=\"100\"\n      :height=\"500\"\n      :width=\"600\"\n      :menu-func=\"updateMenu2\"\n      bring-to-front-after-drag\n      :actions=\"['embedded', 'pin', 'maximize', 'fullscreen']\"\n      embedded\n      content-class=\"bg-grey-1\"\n    >\n      <div class=\"q-pa-md fit scroll\">\n        <q-scroll-area style=\"width: 100%; height: 100%\">\n          <div class=\"text-h4\">Quasar Framework</div>\n          <div class=\"quasar\"><img src=\"https://cdn.quasar.dev/logo/svg/quasar-logo.svg\" alt=\"Quasar Framework\" height=\"150\" width=\"150\"/></div>\n          <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n          <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n        </q-scroll-area>\n      </div>\n    </q-window>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    updateMenu1 (menuItems) {\n      if (this.$refs.window1.isEmbedded !== true && this.$refs.window1.isFullscreen !== true) {\n        if (menuItems[menuItems.length - 1].key === 'visible') {\n          menuItems.splice(menuItems.length - 1, 0, 'separator')\n        }\n        let sendToBack = {\n          key: 'sendtoback',\n          state: false,\n          on: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack1\n          },\n          off: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack1\n          }\n        }\n        let bringToFront = {\n          key: 'bringtofront',\n          state: false,\n          on: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront1\n          },\n          off: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront1\n          }\n        }\n        let centerWindow = {\n          key: 'centerwindow',\n          state: false,\n          on: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow1\n          },\n          off: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow1\n          }\n        }\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, sendToBack)\n        menuItems.splice(menuItems.length, 0, bringToFront)\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, centerWindow)\n      }\n    },\n    bringToFront1 () {\n      this.$refs.window1.bringToFront()\n    },\n    sendToBack1 () {\n      this.$refs.window1.sendToBack()\n    },\n    centerWindow1 () {\n      this.$refs.window1.centerWindow()\n    },\n    updateMenu2 (menuItems) {\n      if (this.$refs.window2.isEmbedded !== true && this.$refs.window2.isFullscreen !== true) {\n        if (menuItems[menuItems.length - 1].key === 'visible') {\n          menuItems.splice(menuItems.length - 1, 0, 'separator')\n        }\n        let sendToBack = {\n          key: 'sendtoback',\n          state: false,\n          on: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack2\n          },\n          off: {\n            label: 'Send to Back',\n            icon: '',\n            func: this.sendToBack2\n          }\n        }\n        let bringToFront = {\n          key: 'bringtofront',\n          state: false,\n          on: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront2\n          },\n          off: {\n            label: 'Bring to Front',\n            icon: '',\n            func: this.bringToFront2\n          }\n        }\n        let centerWindow = {\n          key: 'centerwindow',\n          state: false,\n          on: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow2\n          },\n          off: {\n            label: 'Center Window',\n            icon: '',\n            func: this.centerWindow2\n          }\n        }\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, sendToBack)\n        menuItems.splice(menuItems.length, 0, bringToFront)\n        menuItems.splice(menuItems.length, 0, 'separator')\n        menuItems.splice(menuItems.length, 0, centerWindow)\n      }\n    },\n    bringToFront2 () {\n      this.$refs.window2.bringToFront()\n    },\n    sendToBack2 () {\n      this.$refs.window2.sendToBack()\n    },\n    centerWindow2 () {\n      this.$refs.window2.centerWindow()\n    }\n  }\n}\n<\/script>\n"},8788:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Complex Slot"\n      :height="600"\n      :width="400"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <template #default="{ zIndex }">\n        <div class="fit">\n          <q-layout view="lhh LpR lff" container style="height: 100%" class="shadow-2 rounded-borders">\n            <q-header reveal class="bg-black">\n              <q-toolbar>\n                <q-btn flat @click="drawerLeft = !drawerLeft" round dense icon="menu" />\n                <q-toolbar-title>Header</q-toolbar-title>\n                <q-btn flat @click="drawerRight = !drawerRight" round dense icon="menu" />\n              </q-toolbar>\n            </q-header>\n\n            <q-footer>\n              <q-toolbar>\n                <q-toolbar-title>Footer</q-toolbar-title>\n              </q-toolbar>\n            </q-footer>\n\n            <q-drawer\n              v-model="drawerLeft"\n              :width="350"\n              :breakpoint="700"\n              bordered\n              content-class="bg-grey-3"\n              :style="{ zIndex: zIndex + 1 }"\n            >\n              <q-scroll-area class="fit">\n                <div class="q-pa-sm">\n                  <div v-for="n in 50" :key="n">Drawer {{ n }} / 50</div>\n                </div>\n              </q-scroll-area>\n            </q-drawer>\n\n            <q-drawer\n              side="right"\n              v-model="drawerRight"\n              bordered\n              :width="350"\n              :breakpoint="500"\n              content-class="bg-grey-3"\n              :style="{ zIndex: zIndex + 1 }"\n            >\n              <q-scroll-area class="fit">\n                <div class="q-pa-sm">\n                  <div v-for="n in 50" :key="n">Drawer {{ n }} / 50</div>\n                </div>\n              </q-scroll-area>\n            </q-drawer>\n\n            <q-page-container>\n              <q-page style="padding-top: 60px" class="q-pa-md">\n                <q-markdown>\n  Some information about **QWindow**:\n  1. If it starts off embedded, but you can `unlock` it from the menu to make it `float`\n  2. If floating, you can `embed` it back again\n  3. If floating, you can move it around (via caption), or resize it (via sides and corners)\n  4. If a QWindow is embeddable, you can `close` it while in embedded or floating states. It is up to the developer to provide a way to bring it back (ex: via a QBtn - close this window and try it!)\n  5. You can enter fullscreen mode (currently while floating)\n  6. The menu can be manipulated in devland. Notice the "Bring to Front" and "Send to Back" functions (while floating)\n  7. QWindow is embeddable anywhere like a normal HTML element. It displayes slotted content provided by the developer\n  8. On any move or resize (while floating), `position` is emitted with `{x, y, width, height }` values\n  9. If initial `startX`, `startY`, `width` and `height` are not given, defaults will be used. The algorithm always makes sure two windows do not completely overlap each other on initial render\n  10. There is a special property `bring-to-front-after-drag` that ensures a dragged/resized window always remains on top\n                  </q-markdown>\n\n                  <q-page-sticky position="top" expand class="bg-accent text-white">\n                    <q-toolbar>\n                      <q-btn flat round dense icon="map" />\n                      <q-toolbar-title>Title</q-toolbar-title>\n                    </q-toolbar>\n                  </q-page-sticky>\n                </q-page>\n\n                <q-page-scroller position="bottom">\n                  <q-btn fab icon="keyboard_arrow_up" color="red" />\n                </q-page-scroller>\n              </q-page-container>\n            </q-layout>\n          </div>\n        </template>\n    </q-window>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'MyLayout\',\n  data () {\n    return {\n      leftDrawerOpen: this.$q.platform.is.desktop,\n      drawerLeft: false,\n      drawerRight: true\n    }\n  }\n}\n<\/script>\n'},9006:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Scroll With Window"\n      scroll-with-window\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},"933a":function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <q-window\n    title="QWindow Scroll Area"\n    :height="500"\n    :width="600"\n    :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n    embedded\n    content-class="bg-grey-1"\n  >\n    <div class="q-pa-md fit scroll">\n      <q-scroll-area style="width: 100%; height: 100%">\n        <div class="text-h4">Quasar Framework</div>\n        <div class="quasar"><img src="https://cdn.quasar.dev/logo/svg/quasar-logo.svg" alt="Quasar Framework" height="150" width="150"/></div>\n        <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n        <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n      </q-scroll-area>\n    </div>\n  </q-window>\n</template>\n'},"9a60":function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Border"\n      border-width="3px"\n      border-style="dashed"\n      color="#C4C27A"\n      background-color="#BB714F"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},ac31:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Bring to Front After Drag 1"\n      :height="500"\n      :width="600"\n      bring-to-front-after-drag\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-pa-md fit scroll">\n        <q-scroll-area style="width: 100%; height: 100%">\n          <div class="text-h4">Quasar Framework</div>\n          <div class="quasar"><img src="https://cdn.quasar.dev/logo/svg/quasar-logo.svg" alt="Quasar Framework" height="150" width="150"/></div>\n          <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n          <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n        </q-scroll-area>\n      </div>\n    </q-window>\n    <q-window\n      title="QWindow Bring to Front After Drag 2"\n      :height="500"\n      :width="600"\n      bring-to-front-after-drag\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-pa-md fit scroll">\n        <q-scroll-area style="width: 100%; height: 100%">\n          <div class="text-h4">Quasar Framework</div>\n          <div class="quasar"><img src="https://cdn.quasar.dev/logo/svg/quasar-logo.svg" alt="Quasar Framework" height="150" width="150"/></div>\n          <p>Quasar Framework is an MIT-licensed open-source project maintained by Razvan Stoenescu along with his Team and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Quasar so you can get on with your own development projects. We’re working to shape the future of the Vue.js ecosystem to write code once and simultaneously deploy it as a website (SPA/PWA/SSR), a Mobile App and/or an Electron App.</p>\n          <p>Like most open source products, Quasar can’t do it alone. We rely on sponsors, backers and supporters to keep things going. When Quasar starts to bring you some financial stability, please be considerate of the tens of thousands of hours that went into its creation and send some money back to the team that made it possible. And finally, if your company relies on Quasar, the best way to guarantee that Quasar continues to be there for you is to invest in its maintenance!</p>\n        </q-scroll-area>\n      </div>\n    </q-window>\n  </div>\n</template>\n'},b656:function(e,n,t){},e872:function(e,n,t){"use strict";var a=t("b656"),o=t.n(a);o.a},f136:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Round Grippers"\n      round-grippers\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n      content-class="bg-grey-1"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'},f4e0:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      ref="window"\n      title="QWindow Close Action"\n      :visible="visible"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\', \'close\']"\n      embedded\n      content-class="bg-grey-1"\n      @visible="(v) => visible = v"\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n    <q-btn\n      v-if="canShowButton === true"\n      label="Show Window"\n      color="primary"\n      @click="visible = true"\n      style="width: 100%;"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      visible: true\n    }\n  },\n  computed: {\n    canShowButton () {\n      if (this.visible !== true) {\n        return true\n      }\n      return false\n    }\n  }\n}\n<\/script>\n'},ff17:function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div>\n    <q-window\n      title="QWindow Color"\n      color="yellow-2"\n      background-color="blue-grey-4"\n      :height="150"\n      :width="350"\n      :actions="[\'embedded\', \'pin\', \'maximize\', \'fullscreen\']"\n      embedded\n    >\n      <div class="q-ma-md">\n        This is the "default" slot content\n      </div>\n    </q-window>\n  </div>\n</template>\n'}}]);